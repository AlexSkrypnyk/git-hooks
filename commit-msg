#!/usr/bin/php
<?php
/**
 * @file
 * Commit-message hook to check commit messages standards.
 *
 * Unfortunately, git does not allow to commit git hooks, so each developer
 * has to install this separately.
 *
 * INSTALLATION
 * php commit-msg INSTALL
 * to install into current dir
 * php commit-msg INSTALL /path/to/git/root
 * to install into specified path.
 *
 * USAGE
 * To use as a git hook (main usage):
 * Name this file 'commit-msg' and place in '.git/hooks' directory of your
 * project. The file needs to have executable permissions.
 *
 * To perform self testing, use
 * php commit-msg SELFTEST
 *
 * To perform encoding of excluded words (useful for regeneration of list of
 * swear words), use
 * php commit-msg ENCODEWORDS comma,separated,list,of,words
 * The result needs to be used as a replacement for MESSAGE_EXCLUDED_WORDS
 * constant value.
 *
 * To perform decoding of excluded words, use
 * php commit-msg DECODEWORDS encoded-list-of-words
 */

// Constants.
//
// Commands.
define('COMMAND_INSTALL', 'INSTALL');
define('COMMAND_TEST', 'SELFTEST');
define('COMMAND_ENCODE_WORDS', 'ENCODEWORDS');
define('COMMAND_DECODE_WORDS', 'DECODEWORDS');
// Return codes.
define('RETURN_OK', 0);
define('RETURN_ERROR', 1);
// Delimiters.
define('DELIM_ISSUE_START', '[');
define('DELIM_ISSUE_FINISH', ']');
// Messages.
define('MESSAGE_START_WORDS', 'created,changed,reinstated,removed,moved,updated,upgraded,deleted,added,fixed,closed,inserted,modified,appended,refactored,merged,completed,changed,deprecated,reverted,enabled,disabled,replaced,changed,renamed');
// Encoded words, including curse words. Encoded for a purpose of appropriate
// code hosting.
define('MESSAGE_EXCLUDED_WORDS', 'bobm-bovt-bstf-btt-cbmmtbdl-cbmmt-cbtubse-cjudi-cjbudi-cmppez-cmpxkpc-cmpx.kpc-cmpx\`kpc-cpmmpdl-cpmmpl-cpofs-cppc-cvhhfs-cvn-cvuu-cvuuqmvh-dmjupsjt-dpdl-dppo-dsbq-dvou-ebno-ejdl-ejmep-ezlf-gbh-gfdl-gfmmbuf-gfmmbujp-gfmdijoh-gvdl-g\!v\!d\!l-gvdljoh-gvdlfe-gvdlfs-gvehfqbdlfs-gvehf.qbdlfs-gmbohf-hpeebno-hpe.ebno-hpe\!ebno-ifmm-ipnp-kfsl-kj\{\{-lopcfoe-lopc\`foe-lopc.foe-mbcjb-mnbp-mngbp-nvgg-ojhhfs-ojhhb-pnh-qfojt-qjtt-qppq-qsjdl-qvcf-qvttz-rvffs-tdspuvn-tfy-tiju-t.iju-ti2u-tmvu-tnfhnb-tqvol-uju-upttfs-uvse-uxbu-wbhjob-xbol-xboljoh-xbolfs-xipsf-xug-uftutxfbsjoh');
//define('MESSAGE_EXCLUDED_WORDS', 'cmpx.kpc-cmpx\`kpc');
// Array of words to be used as an identifier of an automatic commit.
define('MESSAGE_AUTO_WORDS', 'Merge branch,Merge remote-tracking');
//Comma-separated list of words allowed inside of the issue definition.
define('MESSAGE_ALLOWED_ISSUE_WORDS', 'ci skip,skip ci');

exit(main($argv, $argc));

/**
 * Main script runner.
 *
 * @param array $argv
 *   Array of arguments passed to script.
 * @param int $argc
 *  The number of arguments passed to script
 *
 * @return int
 *   Exit code to return to calling process.
 */
function main($argv, $argc) {
  if ($argv[1] == COMMAND_INSTALL) {
    if (isset($argv[2])) {
      $dir = $argv[2];
    }
    else {
      // Using current dir.
      $dir = getcwd();
    }

    return install($dir);
  }
  elseif ($argv[1] == COMMAND_TEST) {
    return test();
  }
  elseif ($argv[1] == COMMAND_ENCODE_WORDS) {
    if (!isset($argv[2])) {
      print 'Please specify a string of comma separated excluded words to encode';

      return RETURN_ERROR;
    }

    print "\r\n" . excluded_words_encode(str_replace(', ', ',', implode(' ', array_slice($argv, 2)))) . "\r\n";

    return RETURN_OK;
  }
  elseif ($argv[1] == COMMAND_DECODE_WORDS) {
    if (!isset($argv[2])) {
      print 'Please specify a string of encoded excluded words to decode';

      return RETURN_ERROR;
    }

    print "\r\n" . implode(', ', excluded_words_decode(implode('', array_slice($argv, 2)))) . "\r\n";

    return RETURN_OK;
  }
  else {
    if (!file_exists($argv[1])) {
      print 'Unable to open a file ' . implode(' ', array_slice($argv, 1)) . "\n";

      return RETURN_ERROR;
    }

    $text = file_get_contents($argv[1]);
  }

  $message_error = checkMessage(rtrim($text));
  // If message error returned, print it and set a return code to RETURN_ERROR
  // to stop this commit.
  if (is_string($message_error)) {
    print $message_error;
    $code = RETURN_ERROR;
  }
  else {
    $code = RETURN_OK;
  }

  return $code;
}

/**
 * Install this script into specified directory.
 *
 * @param string $dir
 *   Directory to install this script.
 */
function install($dir) {
  $git_dir = $dir . '/.git/hooks';
  $dst = $git_dir . '/' . basename(__FILE__);
  if (!file_exists($git_dir)) {
    print "Specified directory " . $git_dir . " is not a git repository\n";

    return RETURN_ERROR;
  }

  if (copy(__FILE__, $dst)) {
    print "Successfully copied " . basename(__FILE__) . " file to " . basename($dst) . "\n";
    chmod($dst, 0755);

    return RETURN_OK;
  }

  return RETURN_ERROR;
}

/**
 * Commit message assessment functionality.
 */
function checkMessage($message) {
  // Split subject from body.
  $message = explode("\n\n", $message);
  $message = $message[0];

  // Any automatically generated commit must pass.
  $auto_words = explode(',', MESSAGE_AUTO_WORDS);
  foreach ($auto_words as $word) {
    if (strpos($message, $word) !== FALSE) {
      return TRUE;
    }
  }

  if (has_excluded_words($message)) {
    return 'A commit must not contain any swearing words.';
  }

  // Contains issue number.
  if (strpos($message, DELIM_ISSUE_START) === 0 || strpos($message, DELIM_ISSUE_FINISH) !== FALSE) {
    if (strpos($message, DELIM_ISSUE_FINISH) === FALSE || (strpos($message, DELIM_ISSUE_START) !== 0 && strpos($message, DELIM_ISSUE_FINISH) !== FALSE)) {
      return 'A commit with issue references should have them listed between ' . DELIM_ISSUE_START . ' and ' . DELIM_ISSUE_FINISH . '.';
    }
    $pos = strpos($message, DELIM_ISSUE_FINISH);
    $issue = substr($message, 1, $pos - 1);
    $message = substr($message, $pos + 1);

    if (strpos($message, DELIM_ISSUE_START) !== FALSE || strpos($message, DELIM_ISSUE_FINISH) !== FALSE || strpos($issue, DELIM_ISSUE_START) !== FALSE || strpos($issue, DELIM_ISSUE_FINISH) !== FALSE) {
      return 'A commit should contain only single block of issue references and it should be at the start.';
    }

    if (strpos($message, '  ') === 0 || strpos($message, ' ') !== 0) {
      return 'A commit with issue reference should have exactly 1 space in between.';
    }

    $issue_parts = explode(', ', $issue);
    foreach ($issue_parts as $issue_part) {
      $issue_pattern = '/^(?:[A-Z0-9]+(\-[0-9]+)*|' . implode('|', explode(',', MESSAGE_ALLOWED_ISSUE_WORDS)) . ')$/';
      if (!preg_match($issue_pattern, $issue_part)) {
        return 'A commit reference number should look like [ABC] or [ABC, DEF] or [ABC-123, ABC123-456, ABC] or one of the allowed words: ' . implode(', ', explode(',', MESSAGE_ALLOWED_ISSUE_WORDS)) . '.';
      }
    }

    $message = ltrim($message);
  }

  $sentences = split_sentences($message);
  foreach ($sentences as $k => $sentence) {
    $first_letter = substr($sentence, 0, 1);

    // Starts from a non-letter.
    if (!ctype_alpha($first_letter)) {
      return 'A commit should start from a letter.';
    }

    // Starts from a capital letter.
    if (is_lowercase($first_letter)) {
      return 'A commit should start from a capital letter.';
    }

    $last_character = substr($sentence, -1, 1);
    if (!in_array($last_character, array('.', '!'))) {
      return 'A commit should have every sentence properly terminated.';
    }

    if ($k == 0) {
      $split_words = split_words($sentence);
      if (count($split_words) < 2) {
        return "A commit should contain more that 1 word.";
      }

      if (!in_array(strtolower($split_words[0]), explode(',', MESSAGE_START_WORDS))) {
        return 'A commit can start only from these words: ' . implode(', ', explode(',', MESSAGE_START_WORDS)) . '.';
      }
    }
  }

  return TRUE;
}

/**
 * Perform testing of current functionality.
 */
function test() {
  // Selftesting testing system.
  assert_true(TRUE, 'Assertion positive test.');
  assert_false(FALSE, 'Assertion negative test.');

  // Unit tests for helpers.
  // Test split_sentences.
  $sentences = array(
    'Simple sentence.',
    'Simple sentence!',
    'Simple sentence?',
    'Simple sentence no. 4?!',
    'Simple sentence...',
    'Simple sentence',
  );
  $split_sentences = split_sentences(implode(' ', $sentences));
  if (count($split_sentences) != count($sentences)) {
    assert_true(FALSE, 'Sentences are split correclty.');
  }
  else {
    $correct = 0;
    foreach ($sentences as $k => $sentence) {
      $correct = $sentences[$k] == $split_sentences[$k] ? $correct + 1 : $correct;
    }
    assert_equal(count($sentences), $correct, 'Sentences are split correctly.');
  }

  // Test split_words.
  $sentences = array(
    'Simple sentence',
    'Simple, sentence',
    'Simple - sentence',
  );
  $correct = 0;
  foreach ($sentences as $k => $sentence) {
    $correct += (int) (count(split_words($sentence)) == 2);
  }
  assert_equal(count($sentences), $correct, 'Words in sentences are split correctly.');

  assert_true(is_lowercase('a'), 'Lowercase letter.');
  assert_false(is_uppercase('a'), 'Not uppercase letter.');
  assert_true(is_uppercase('A'), 'Uppercase letter.');
  assert_false(is_lowercase('A'), 'Not uppercase letter.');

  assert_equal('list,of,words', implode(',', excluded_words_decode(excluded_words_encode('list,of,words'))), 'Encoding and decoding of list of offensive words');

  print "\n";

  // Possible commit formats.
  // [PRJ-123] Verb in past ending with a dot at the end.
  // [PRJ, PRJ-123] Verb in past ending with a dot at the end.
  // [PRJ-321, PRJ-123] Verb in past ending with a dot at the end.
  // [PRJ] Verb in past ending with a dot at the end.
  // Verb in past ending with a dot at the end.
  // Verb in past ending with a dot at the end. Another sentence with dot.
  // Verbs are: added, implemented, fixed, removed, deleted, deployed.

  // Prohibited words filter.
  assert_false(checkMessage('Inserted prohibited word testswearing.'), 'Declined: Prohibited word.');
  assert_false(checkMessage('Inserted prohibited uppercase word Testswearing.'), 'Declined: Prohibited uppercase word.');
  assert_true(checkMessage('Inserted prohibited word partial testswearinging.'), 'Accepted: Prohibited word as a part of another word.');

  // Test double conversion of prohibited words.
  $decoded_words = shell_exec('php ' . __FILE__ . ' ' . COMMAND_DECODE_WORDS . ' ' . MESSAGE_EXCLUDED_WORDS);
  $decoded_words = trim($decoded_words);
  $encoded_decoded_words = shell_exec('php ' . __FILE__ . ' ' . COMMAND_ENCODE_WORDS . ' ' . $decoded_words);
  $encoded_decoded_words = trim($encoded_decoded_words);
  assert_equal(MESSAGE_EXCLUDED_WORDS, $encoded_decoded_words, 'Encoding of decoded string equal to initial encoded string');

  // First letter.
  assert_false(checkMessage('1 Inserted commit starting from non-letter.'), 'Declined: Starts with non-letter.');
  assert_false(checkMessage('! Inserted commit starting from non-letter.'), 'Declined: Starts with non-letter.');
  assert_false(checkMessage('inserted lowercase commit.'), 'Declined: Starts with lowercase.');
  // Presence of issue reference.
  assert_true(checkMessage('[ABC] Inserted correct issue number.'), 'Accepted: Proper singular issue reference.');
  assert_false(checkMessage('[ABC Inserted issue reference should be properly terminated.'), 'Declined: Issue reference should be properly terminated.');
  assert_false(checkMessage('ABC] Inserted issue reference should be properly started.'), 'Declined: Issue reference should be properly started.');
  assert_false(checkMessage('[ABC][DEF] Inserted issue references should be referenced only once.'), 'Declined: Issue references should be referenced only once.');
  assert_false(checkMessage('[ABC]Inserted message with no spaces.'), 'Declined: There should be exactly 1 space between issue reference and commit message.');
  assert_false(checkMessage('[ABC]  Inserted message with no spaces.'), 'Declined: There should be exactly 1 space between issue reference and commit message.');
  assert_false(checkMessage('[abc] Inserted non-uppercase issue reference.'), 'Declined: Non-uppercase issue reference.');
  // Issue reference validity.
  assert_true(checkMessage('[ABC123-456] Inserted issue reference with digit in project name.'), 'Accepted: Digit in project name.');
  assert_false(checkMessage('[abc, ABC] Inserted multiple non-uppercase issue references.'), 'Declined: Multiple non-uppercase issue references - first.');
  assert_false(checkMessage('[ABC, abc] Inserted multiple non-uppercase issue references.'), 'Declined: Multiple non-uppercase issue references - second.');
  assert_false(checkMessage('[ABC,CDE] Inserted multiple issue references with no space in between.'), 'Declined: Multiple issue references with no space in between.');
  assert_false(checkMessage('[123-ABC] Inserted non-alpha staring issue references.'), 'Declined: Non-alpha staring issue references.');
  assert_true(checkMessage('[ABC-123, CDE-456, FGH, IJK-123] Inserted multiple valid issue references.'), 'Accepted: Multiple valid issue references.');
  // Commit message.
  assert_true(checkMessage('[ABC] Inserted correct issue properly terminated.'), 'Accepted: Single properly terminated sentence.');
  assert_true(checkMessage('[ABC] Inserted asd.'), 'Accepted: Single properly terminated sentence.');
  assert_true(checkMessage('[ABC] Inserted correct issue number. And second properly terminated sentence.'), 'Accepted: Multiple properly terminated sentences.');
  assert_false(checkMessage('[ABC] Inserted correct issue number not properly terminated? And second properly terminated sentence.'), 'Declined: Multiple sentences terminated incorrectly in the middle.');
  assert_true(checkMessage('[ABC] Inserted correct commit starting with allowed starting word.'), 'Accepted: Correct commit starting with allowed starting word');
  assert_false(checkMessage('[ABC] Incorrect commit starting with a word that is not in allowed starting word list.'), 'Declined: Incorrect commit starting with a word outside of allowed starting word list.');
  assert_false(checkMessage('[ABC] Inserting incorrect commit starting with a partially allowed starting word.'), 'Declined: Incorrect commit starting with incorrect partially-allowed starting word.');
  assert_false(checkMessage('[ABC] Added.'), 'Declined: Incorrect commit with one word.');

  assert_true(checkMessage('[ci skip] Added a feature.'), 'Accepted: Correct issue additional word.');
  assert_true(checkMessage('[skip ci] Added a feature.'), 'Accepted: Correct issue another additional word.');
  assert_true(checkMessage('[ABC, ci skip] Added a feature.'), 'Accepted: Correct issue additional word with other issue.');
  assert_true(checkMessage('[ABC-123, ci skip] Added a feature.'), 'Accepted: Correct issue additional word with other numbered issue.');
  assert_true(checkMessage('[ABC, ABC-123, ci skip] Added a feature.'), 'Accepted: Correct issue additional word with issue and numbered issue.');
  assert_true(checkMessage('[ci skip, ABC, ABC-123] Added a feature.'), 'Accepted: Correct issue additional word at the start with issue and numbered issue.');

  assert_true(checkMessage("Merged branch 'master' of something into branch-123."), 'Accepted: Automerge commit message.');
  assert_true(checkMessage("Merge remote-tracking branch 'branch-1'' into 'branch2'"), 'Accepted: Another automerge commit message.');
  assert_true(checkMessage("Merge branch 'master' of something into branch-123"), 'Accepted: Automerge commit message without proper sentence termination.');
  assert_true(checkMessage("Merged branch 'master' of something into branch-123.\n\nSome body with multiple lines\nAnother line without dot"), 'Accepted: Automerge commit message with body field.');

  return test_results();
}

/**
 * Helper to check whether a text contains swear words.
 */
function has_excluded_words($txt) {
  // Simple encryption to avoid praying eyes. Just substract 1 ASCII character
  // number.
  $words_decoded = excluded_words_decode(MESSAGE_EXCLUDED_WORDS);
  $txt_parts = preg_split('/[,;\s\.\?\!]/', $txt);
  $txt_parts = array_map('strtolower', $txt_parts);
  $res = array_intersect($words_decoded, $txt_parts);

  return (bool) !empty($res);
}

/**
 * Helper to check that text is in uppercase.
 */
function is_uppercase($txt) {
  return $txt == strtoupper($txt);
}

/**
 * Helper to check that text is in lowercase.
 */
function is_lowercase($txt) {
  return $txt == strtolower($txt);
}

/**
 * Helper to split text into sentences.
 */
function split_sentences($txt) {
  return preg_split('/(?<=[.?!])\s+(?=[a-z])/i', $txt);
}

/**
 * Helper to split sentences into words.
 */
function split_words($txt) {
  return preg_split('/\s\-\s|\s|,\s/', $txt);
}

/**
 * Decode excluded words.
 */
function excluded_words_decode($txt) {
  $words_decoded = '';
  foreach (str_split($txt) as $l) {
    $words_decoded .= chr(ord($l) - 1);
  }

  return explode(',', $words_decoded);
}

/**
 * Encode excluded words.
 */
function excluded_words_encode($txt) {
  $words_encoded = '';
  foreach (str_split($txt) as $l) {
    $l = chr(ord($l) + 1);
    $l = $l == '!' ? '\!' : escapeshellcmd($l);
    $words_encoded .= $l;
  }

  return $words_encoded;
}

/**
 * Equal assertion helper.
 */
function assert_equal($expected, $actual, $msg = '') {
  return print_assert_result($msg, $expected == $actual, $expected, $actual);
}

/**
 * Boolean TRUE assertion helper.
 */
function assert_true($actual, $msg = '') {
  return print_assert_result($msg, $actual === TRUE, TRUE, $actual);
}

/**
 * Boolean FALSE assertion helper.
 */
function assert_false($actual, $msg = '') {
  return print_assert_result($msg, $actual !== TRUE, FALSE, $actual);
}

/**
 * Assertion result print helper.
 */
function print_assert_result($result, $passed, $expected, $actual) {
  if ($passed) {
    print "\033[0;32mPASSED\033[0m " . $result . "\n";
  }
  else {
    print "\033[0;31mFAILED\033[0m " . $result . "\n";
    print "  Expected: " . print_r($expected, TRUE) . "\n";
    print "  Actual: " . print_r($actual, TRUE) . "\n";
  }

  set_assertion_result($passed);

  return $passed;
}

/**
 * Set global assertion result.
 */
function set_assertion_result($result) {
  global $test_results;
  if (!$test_results) {
    $test_results = array();
  }
  $test_results[] = $result;
}

/**
 * Returns TRUE if all assertion results have passed.
 */
function test_results() {
  global $test_results;

  return count($test_results) == count(array_filter($test_results));
}
